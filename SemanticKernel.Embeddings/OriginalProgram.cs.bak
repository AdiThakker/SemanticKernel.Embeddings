using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.VectorData;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Embeddings;
using SemanticKernel.Embeddings;
using System.Linq;

try
{
    Console.WriteLine("Starting SQLite Vector Store Demo...");

    var builder = Kernel
                    .CreateBuilder()
                    .AddOllamaTextEmbeddingGeneration("all-minilm", new Uri("http://localhost:11434"))
                    .AddOllamaTextGeneration("phi3", new Uri("http://localhost:11434"));
                    

    var kernel = builder.Build();

    // Initialize SQLite vector store
    Console.WriteLine("Initializing SQLite vector store...");
    using var dbContext = new VectorDbContext();
    var vectorStore = new SqliteVectorStore(dbContext);
    await vectorStore.InitializeAsync();

    #pragma warning disable SKEXP0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.
    var embedding = kernel.GetRequiredService<ITextEmbeddingGenerationService>();
    #pragma warning restore SKEXP0001 // Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed.

    Console.WriteLine("Reading files...");
    var instructions = await File.ReadAllTextAsync("Plugin/instructions.txt");
    var data = await File.ReadAllTextAsync("Plugin/data.csv");
    var prompt = await File.ReadAllTextAsync("Plugin/prompt.txt");

    Console.WriteLine("Processing and storing embeddings...");
    var lines = data.Split('\n', StringSplitOptions.RemoveEmptyEntries);

    int idx = 0;
    foreach (var line in lines)
    {
        Console.WriteLine($"Processing line {idx + 1}/{lines.Length}");
        await vectorStore.UpsertAsync(new Data<string>
        {
            Category = "data",
            Key = $"{idx++}",
            Text = line,
            TextEmbedding = await embedding.GenerateEmbeddingAsync(line)
        });
    }   

    Console.WriteLine("Performing vector search...");
    var query = "Generate a query for the Sales workspace";
    var queryEmbedding = await embedding.GenerateEmbeddingAsync(query);

    var searchResults = await vectorStore.VectorizedSearchAsync(queryEmbedding, 1);
    var csvData = searchResults?.FirstOrDefault()?.Record?.Text;

    Console.WriteLine("Generating SQL response...");
    var sqlPlugin = kernel.CreateFunctionFromPrompt(prompt);
    var response = await sqlPlugin.InvokeAsync(kernel, new KernelArguments { ["instructions"] = instructions, ["csvData"] = csvData});

    Console.WriteLine("Generated SQL:");
    Console.WriteLine(response);
}
catch (Exception ex)
{
    Console.WriteLine($"Error: {ex.Message}");
    Console.WriteLine($"Stack trace: {ex.StackTrace}");
}
